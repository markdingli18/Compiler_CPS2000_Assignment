<Letter> ::= [A-Za-z]
<Digit> ::= [0-9]
<Hex> ::= [A-Fa-f] | <Digit>

<Type> ::= "float" | "int" | "bool" | "colour"
<BooleanLiteral> ::= "true" | "false"
<IntegerLiteral> ::= <Digit> { <Digit> }
<FloatLiteral> ::= <Digit> { <Digit> } "." <Digit> { <Digit> }
<ColourLiteral> ::= "#" <Hex> <Hex> <Hex> <Hex> <Hex> <Hex>
<PadWidth> ::= "__width"
<PadHeight> ::= "__height"
<PadRead> ::= "__read" <Expr> "," <Expr>
<PadRandI> ::= "__randi" <Expr>

<Literal> ::= <BooleanLiteral>
            | <IntegerLiteral>
            | <FloatLiteral>
            | <ColourLiteral>
            | <PadWidth>
            | <PadHeight>
            | <PadRead>
            | <PadRandI>

<Identifier> ::= <Letter> { " " | <Letter> | <Digit> }

<MultiplicativeOp> ::= "*" | "/" | "and"
<AdditiveOp> ::= "+" | "-" | "or"
<RelationalOp> ::= "<" | ">" | "==" | "!=" | "<=" | ">="

<ActualParams> ::= <Expr> { "," <Expr> }
<FunctionCall> ::= <Identifier> "(" [ <ActualParams> ] ")"

<SubExpr> ::= "(" <Expr> ")"
<Unary> ::= ( "-" | "not" ) <Expr>

<Factor> ::= <Literal>
           | <Identifier>
           | <FunctionCall>
           | <SubExpr>
           | <Unary>
           | <PadRandI>
           | <PadWidth>
           | <PadHeight>
           | <PadRead>

<Term> ::= <Factor> { <MultiplicativeOp> <Factor> }
<SimpleExpr> ::= <Term> { <AdditiveOp> <Term> }
<Expr> ::= <SimpleExpr> { <RelationalOp> <SimpleExpr> }

<Assignment> ::= <Identifier> "=" <Expr>
<VariableDecl> ::= "let" <Identifier> ":" <Type> "=" <Expr>

<PrintStatement> ::= "__print" <Expr>
<DelayStatement> ::= "__delay" <Expr>
<PixelStatement> ::= "__pixelr" <Expr> "," <Expr> "," <Expr> "," <Expr> "," <Expr>
                   | "__pixel" <Expr> "," <Expr> "," <Expr>
<RtrnStatement> ::= "return" <Expr>

<IfStatement> ::= "if" "(" <Expr> ")" <Block> [ "else" <Block> ]
<ForStatement> ::= "for" "(" [ <VariableDecl> ] ";" <Expr> ";" [ <Assignment> ] ")" <Block>
<WhileStatement> ::= "while" "(" <Expr> ")" <Block>

<FormalParam> ::= <Identifier> ":" <Type>
<FormalParams> ::= <FormalParam> { "," <FormalParam> }
<FunctionDecl> ::= "fun" <Identifier> "(" [ <FormalParams> ] ")" "->" <Type> <Block>

<Statement> ::= <VariableDecl> ";"
              | <Assignment> ";"
              | <PrintStatement> ";"
              | <DelayStatement> ";"
              | <PixelStatement> ";"
              | <IfStatement>
              | <ForStatement>
              | <WhileStatement>
              | <RtrnStatement> ";"
              | <Function

I apologize for the mistake earlier. Here's the complete grammar for PixArLang programming language:

<Letter> ::= [A-Za-z]
<Digit> ::= [0-9]
<Hex> ::= [A-Fa-f] | <Digit>

<Type> ::= "float" | "int" | "bool" | "colour"
<BooleanLiteral> ::= "true" | "false"
<IntegerLiteral> ::= <Digit> { <Digit> }
<FloatLiteral> ::= <Digit> { <Digit> } "." <Digit> { <Digit> }
<ColourLiteral> ::= "#" <Hex> <Hex> <Hex> <Hex> <Hex> <Hex>
<PadWidth> ::= "__width"
<PadHeight> ::= "__height"
<PadRead> ::= "__read" <Expr> "," <Expr>
<PadRandI> ::= "__randi" <Expr>

<Literal> ::= <BooleanLiteral>
| <IntegerLiteral>
| <FloatLiteral>
| <ColourLiteral>
| <PadWidth>
| <PadHeight>
| <PadRead>
| <PadRandI>

<Identifier> ::= <Letter> { " " | <Letter> | <Digit> }

<MultiplicativeOp> ::= "*" | "/" | "and"
<AdditiveOp> ::= "+" | "-" | "or"
<RelationalOp> ::= "<" | ">" | "==" | "!=" | "<=" | ">="

<ActualParams> ::= <Expr> { "," <Expr> }
<FunctionCall> ::= <Identifier> "(" [ <ActualParams> ] ")"

<SubExpr> ::= "(" <Expr> ")"
<Unary> ::= ( "-" | "not" ) <Expr>

<Factor> ::= <Literal>
| <Identifier>
| <FunctionCall>
| <SubExpr>
| <Unary>
| <PadRandI>
| <PadWidth>
| <PadHeight>
| <PadRead>

<Term> ::= <Factor> { <MultiplicativeOp> <Factor> }
<SimpleExpr> ::= <Term> { <AdditiveOp> <Term> }
<Expr> ::= <SimpleExpr> { <RelationalOp> <SimpleExpr> }

<Assignment> ::= <Identifier> "=" <Expr>
<VariableDecl> ::= "let" <Identifier> ":" <Type> "=" <Expr>

<PrintStatement> ::= "__print" <Expr>
<DelayStatement> ::= "__delay" <Expr>
<PixelStatement> ::= "__pixelr" <Expr> "," <Expr> "," <Expr> "," <Expr> "," <Expr>
| "__pixel" <Expr> "," <Expr> "," <Expr>
<RtrnStatement> ::= "return" <Expr>

<IfStatement> ::= "if" "(" <Expr> ")" <Block> [ "else" <Block> ]
<ForStatement> ::= "for" "(" [ <VariableDecl> ] ";" <Expr> ";" [ <Assignment> ] ")" <Block>
<WhileStatement> ::= "while" "(" <Expr> ")" <Block>

<FormalParam> ::= <Identifier> ":" <Type>
<FormalParams> ::= <FormalParam> { "," <FormalParam> }
<FunctionDecl> ::= "fun" <Identifier> "(" [ <FormalParams> ] ")" "->" <Type> <Block>

<Statement> ::= <VariableDecl> ";"
| <Assignment> ";"
| <PrintStatement> ";"
| <DelayStatement> ";"
| <PixelStatement> ";"
| <IfStatement>
| <ForStatement>
| <WhileStatement>
| <RtrnStatement> ";"